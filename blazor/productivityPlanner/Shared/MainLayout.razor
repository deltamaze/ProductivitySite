@inherits LayoutComponentBase
@using productivityPlanner.Services;
@inject AppState state
@implements IDisposable

<div class="sidebar">
    <NavMenu />
</div>

<div class="main">
    <div class="top-row px-4">
        <span class="left-justify">@(state.targetDate.ToString("[ddd, MMM] [MM/dd/yyyy]"))</span>
        <span class="right-justify">@(DateTime.Now.ToString("[ddd, MMM] [MM/dd/yyyy] ") + " [Todo: Show Weather for next few days]")</span>
    </div>

    <div class="content px-4">
        @Body
    </div>
</div>
@code {

    protected override void OnInitialized()
    {
        // Subscribe to the StateChanged EventHandler
        state.OnChange +=
        OnCounterStateAdvancedStateChanged;
    }
    // This method is fired when the CounterState object
    // invokes its StateHasChanged() method
    // This will cause this control to invoke its own
    // StateHasChanged() method refreshing the page
    // and displaying the updated counter value
    void OnCounterStateAdvancedStateChanged(
        object sender, EventArgs e) => StateHasChanged();
    void IDisposable.Dispose()
    {
        // When this control is disposed of
        // unsubscribe from the StateChanged EventHandler
        state.OnChange -=
        OnCounterStateAdvancedStateChanged;
    }

}
